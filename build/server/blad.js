// Generated by CoffeeScript 1.7.1
(function() {
  var blad,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = blad = {
    'types': {}
  };

  blad.Type = (function() {
    Type.prototype.menu = function(cb) {
      return this.service.db((function(_this) {
        return function(collection) {
          return collection.find({
            'url': new RegExp("^\/([^/|\s]*)$")
          }, {
            'sort': 'url'
          }).toArray(function(err, docs) {
            if (err) {
              throw err;
            }
            return cb(docs);
          });
        };
      })(this));
    };

    Type.prototype.children = function(n) {
      var child, _i, _len, _ref, _results;
      if (!this._children) {
        return {};
      }
      if (n != null) {
        _ref = this._children;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          if ((this.url === '/' ? child.url : child.url.replace(this.url, '')).split('/').length === n + 2) {
            _results.push(child);
          }
        }
        return _results;
      } else {
        return this._children;
      }
    };

    Type.prototype.siblings = function(cb) {
      var end, parts, url;
      parts = this.url.split('/');
      url = parts.slice(0, -1).join('/');
      end = parts.slice(-1);
      return this.service.db((function(_this) {
        return function(collection) {
          return collection.find({
            'url': new RegExp('^' + url.toLowerCase() + ("\/(?!\/|" + end + ").*"))
          }, {
            'sort': 'url'
          }).toArray(function(err, docs) {
            if (err) {
              throw err;
            }
            return cb(docs || []);
          });
        };
      })(this));
    };

    Type.prototype.parent = function(cb) {
      var parts, url;
      parts = this.url.split('/');
      if (!(parts.length > 2)) {
        return cb({});
      }
      url = parts.slice(0, -1).join('/');
      return this.service.db((function(_this) {
        return function(collection) {
          return collection.find({
            'url': new RegExp('^' + url.toLowerCase())
          }, {
            'sort': 'url'
          }).toArray(function(err, docs) {
            if (err) {
              throw err;
            }
            if (!(docs.length > 0)) {
              return cb({});
            }
            return cb(docs[0]);
          });
        };
      })(this));
    };

    Type.prototype.render = function(done) {
      return done({});
    };

    function Type(params, service) {
      var key, value;
      this.service = service;
      for (key in params) {
        value = params[key];
        if (key !== 'store' && key !== 'menu' && key !== 'children' && key !== 'siblings' && key !== 'parent' && key !== 'render' && key !== 'constructor' && key !== 'service') {
          this[key] = value;
        }
      }
      this.store = {
        get: (function(_this) {
          return function(key, obj) {
            var _ref, _ref1, _ref2;
            if (obj != null) {
              return (_ref = obj.cache[key]) != null ? _ref.value : void 0;
            } else {
              return (_ref1 = _this.cache) != null ? (_ref2 = _ref1[key]) != null ? _ref2.value : void 0 : void 0;
            }
          };
        })(this),
        save: (function(_this) {
          return function(key, value, done) {
            if (_this.cache == null) {
              _this.cache = {};
            }
            _this.cache[key] = {
              'value': value,
              'modified': (new Date()).toJSON()
            };
            return _this.service.db(function(collection) {
              return collection.update({
                '_id': _this._id
              }, {
                '$set': {
                  'cache': _this.cache
                }
              }, {
                'safe': true
              }, function(err) {
                if (err) {
                  throw err;
                }
                return done();
              });
            });
          };
        })(this),
        isOld: (function(_this) {
          return function(key, ms, interval) {
            if (interval == null) {
              interval = 'ms';
            }
            switch (interval) {
              case 's':
              case 'second':
              case 'seconds':
                ms = 1e3 * ms;
                break;
              case 'm':
              case 'minute':
              case 'minutes':
                ms = 6e4 * ms;
                break;
              case 'h':
              case 'hour':
              case 'hours':
                ms = 3.6e6 * ms;
                break;
              case 'd':
              case 'day':
              case 'days':
                ms = 28.64e7 * ms;
                break;
              case 'w':
              case 'week':
              case 'weeks':
                ms = 6.048e8 * ms;
                break;
              case 'm':
              case 'month':
              case 'months':
                ms = 1.8144e10 * ms;
            }
            if ((_this.cache != null) && (_this.cache[key] != null)) {
              return new Date().getTime() - ms > new Date(_this.cache[key].modified).getTime();
            } else {
              return true;
            }
          };
        })(this)
      };
    }

    return Type;

  })();

  blad.types.BasicDocument = (function(_super) {
    __extends(BasicDocument, _super);

    function BasicDocument() {
      return BasicDocument.__super__.constructor.apply(this, arguments);
    }

    BasicDocument.prototype.render = function(done) {
      return done(this, false);
    };

    return BasicDocument;

  })(blad.Type);

}).call(this);
